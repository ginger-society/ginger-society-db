# Generated by Ginger 5.3.4 on 2024-07-21 18:43

import gingerdj.db.models.deletion
from gingerdj.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="app",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("client_id", models.CharField(max_length=150)),
                ("name", models.CharField(max_length=50)),
                ("logo_url", models.CharField(blank=True, max_length=200, null=True)),
                ("disabled", models.BooleanField(default=False)),
                ("app_url", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "db_table": "app",
            },
        ),
        migrations.CreateModel(
            name="user",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=40, null=True)),
                ("last_name", models.CharField(blank=True, max_length=40, null=True)),
                ("middle_name", models.CharField(blank=True, max_length=40, null=True)),
                ("email_id", models.CharField(max_length=100)),
                (
                    "mobile_number",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "password_hash",
                    models.CharField(blank=True, max_length=400, null=True),
                ),
                ("is_root", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "user",
            },
        ),
        migrations.CreateModel(
            name="token",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_hash",
                    models.CharField(blank=True, max_length=400, null=True),
                ),
                (
                    "app",
                    models.ForeignKey(
                        null=True,
                        on_delete=gingerdj.db.models.deletion.CASCADE,
                        to="src.app",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=gingerdj.db.models.deletion.CASCADE,
                        related_name="tokens",
                        to="src.user",
                    ),
                ),
            ],
            options={
                "db_table": "token",
            },
        ),
        migrations.CreateModel(
            name="group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("identifier", models.CharField(max_length=50)),
                ("disabled", models.BooleanField(default=False)),
                ("short_text", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "owners",
                    models.ManyToManyField(
                        related_name="managed_groups", to="src.user"
                    ),
                ),
                ("users", models.ManyToManyField(related_name="groups", to="src.user")),
            ],
            options={
                "db_table": "group",
            },
        ),
    ]
